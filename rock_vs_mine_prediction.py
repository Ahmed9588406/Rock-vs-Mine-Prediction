# -*- coding: utf-8 -*-
"""Rock vs Mine Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PbF40W_92EOBhnfHZjF4CujwXYiY76F-

Importing the Dependencies Of the projects
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
#find the accuracy of the model
from sklearn.metrics import accuracy_score



"""Data collection and Data Processing"""

#loading the dataset to a pandas Dataframe
sonar_data = pd.read_csv("/content/Copy of sonar data.csv",header=None)

#this function display the first five rows of the dataset
sonar_data.head()

# Nunmber of rows and columns
sonar_data.shape

# Information about each columns
sonar_data.describe()

# counting how many rocks and main examples are ther
sonar_data[60].value_counts()

"""M-->Mine


R-->Rock
"""

sonar_data.groupby(60).mean()

# separating data and labels 
X=sonar_data.drop(columns=60,axis=1)#the axis will be zero if we drop a row and for column we set one
Y=sonar_data[60]

print(X)
print(Y)

"""Training and Test data"""

# Y_train is the label of the X_train and Y_test is the label of Y_train
# test_size take the 10% of the data be a test data
# stratify=Y :we need to split the data based on Rock and Mine
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, stratify=Y, random_state=1)

print(X.shape, X_train.shape, X_test.shape)

print(X_train)
print(Y_train)

"""Model Training --->Logistic Regression"""

model = LogisticRegression()

# training the Logistic Regression model with training data
model.fit(X_train , Y_train)

#accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on training data : ', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy =accuracy_score(X_test_prediction, Y_test)

print('Accuracy on test data : ', test_data_accuracy )

"""Making a predictive System"""

input_data = (0.0131,0.0387,0.0329,0.0078,0.0721,0.1341,0.1626,0.1902,0.2610,0.3193,0.3468,0.3738,0.3055,0.1926,0.1385,0.2122,0.2758,0.4576,0.6487,0.7154,0.8010,0.7924,0.8793,1.0000,0.9865,0.9474,0.9474,0.9315,0.8326,0.6213,0.3772,0.2822,0.2042,0.2190,0.2223,0.1327,0.0521,0.0618,0.1416,0.1460,0.0846,0.1055,0.1639,0.1916,0.2085,0.2335,0.1964,0.1300,0.0633,0.0183,0.0137,0.0150,0.0076,0.0032,0.0037,0.0071,0.0040,0.0009,0.0015,0.0085)
# changing the input_data to a numpy array 
input_data_as_numpy_array = np.asarray(input_data)
# reshape the np array as we are predicting for one instance
input_data_reshape = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshape)
print(prediction)

if(prediction[0]=='R'):
  print('the object is a Rock ')
else:
  print('the object is a Mine ')

